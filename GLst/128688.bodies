class Utils
!!!133168.cpp!!!	test_alpha(in alpha : string) : const int
/*for (unsigned int i = 0; i < alpha.size(); i++)
{
	int place = _valid_cars.find(alpha[i]);
		if ((place < 0) or (place > int(_valid_cars.size()))) return 0;
}*/

return 1;
!!!133680.cpp!!!	test_numeric(in alpha : string) : const int
for (unsigned int i = 0; i < alpha.size(); i++)
{
	int place = _valid_numeric.find(alpha[i]);
		if ((place < 0) or (place > int(_valid_cars.size()))) return 0;
}

return 1;
!!!134064.cpp!!!	upcase(inout str : string) : string
string tmp = str;

transform(
	tmp.begin(),
	tmp.end(),
	tmp.begin(),
	static_cast<int (*)(int)>(toupper));

return tmp;
!!!133793.cpp!!!	upchar(in car : char) : const char
if ((car >= 'a') and (car <= 'z'))
	car -= ('a' - 'A');

return car;
!!!128801.cpp!!!	sp2und(in ligne : string) : const string
string tmp = ligne;

for (int i = 0; i < (int)tmp.size(); i++)
{
	if (tmp[i] == ' ')
		tmp[i] = '_';
}

return tmp;
!!!128929.cpp!!!	und2sp(in ligne : string) : const string
string tmp = ligne;

for (int i = 0; i < (int)tmp.size(); i++)
{
	if (tmp[i] == '_')
		tmp[i] = ' ';
}

return tmp;
!!!128017.cpp!!!	str_compare(in str1 : string, in str2 : string) : const int
if (str1 == str2)
	return 0;

if (lexicographical_compare(
	str1.begin(), str1.end(),
	str2.begin(), str2.end()))
	return -1;
return 1;
