class Collection
!!!130992.cpp!!!	Collection()
this->sort = -1;
return;
!!!131120.cpp!!!	~Collection()
this->clear();
!!!134177.cpp!!!	isSorted(in type : int) : bool
if (type == this->sort)
	return true;
return false;
!!!134305.cpp!!!	setUnsorted() : void
this->sort = -1;
!!!131361.cpp!!!	clear() : void
vector <Media*>::iterator i;

for (i = vMedia.begin(); i != vMedia.end(); i++)
	delete *i;

vMedia.clear();

this->sort = -1;
!!!131248.cpp!!!	add_Zik() : Media*
this->sort = -1;
vMedia.push_back(new Zik());
return vMedia.back();
!!!131376.cpp!!!	add_Film() : Media*
this->sort = -1;
vMedia.push_back(new Film());
return vMedia.back();
!!!132513.cpp!!!	add_Book() : Media*
this->sort = -1;
vMedia.push_back(new Book());
return vMedia.back();
!!!131504.cpp!!!	del_Media(in id : int) : int
if ((id < 0) or (id > (int)vMedia.size()))
	return 0;

//suppression de l'objet
delete vMedia[id];

//tassement du vecteur
for (int i = id; i < ((int)vMedia.size() - 1); i++)
	vMedia[i] = vMedia[i + 1];

//suppression du dernier élément
vMedia.pop_back();

return 1;
!!!131632.cpp!!!	get_Media(in id : int) : Media*
if ((id < 0) or (id > (int)vMedia.size()))
	return NULL;

return vMedia[id];
!!!131760.cpp!!!	find_Media(in num : string) : const int
for (int i = 0; i < (int)vMedia.size(); i++)
	if (vMedia[i]->get_num() == num) return i;

return -1;
!!!131888.cpp!!!	nb_Media() : const int
return vMedia.size();
!!!133153.cpp!!!	nb_Media(in type : int) : const int
int cp = 0; // compteur

for (unsigned int i = 0; i < vMedia.size(); i++)
	if (get_Media(i)->get_type() == type)
		cp++;

return cp;
!!!132016.cpp!!!	nextref_Media(in type : int) : const int
if (type < 1) return -1;

//génération 1ère partie
string num_1 = Media::make_num_1(type);

//nombre maximal
int max_nbr = (int)pow(10. ,(double)(NUM_SIZE - NUM_SEP_POS));

int nbr = 0;

string tmp_num;	//référence temporaire

while (nbr < max_nbr)
{
	//génération de la seconde partie
	string num_2 = Media::make_num_2(nbr);
	//concaténation des 2 parties
	tmp_num = num_1 + NUM_SEP_CAR + num_2;
	//recherche de l'existance de la référence
	if (find_Media(tmp_num) >= 0) nbr++;
	else return nbr;
}

return -1;
!!!133552.cpp!!!	sort_Media(in type : int) : void
//déja trié?
if (this->sort == type)
	return;

//type de trie inconnu?
if (type != SORT_ALPHA && type != SORT_DATE)
	return;

unsigned int size = vMedia.size();

Media* vTmp[size];

unsigned int sortLength = 1, de1, de2, de3;

while (sortLength < size)
{
	de1 = 0;
	while(de1 < size)
	{
		de2 = de1 + sortLength;
		de3 = de2 + sortLength;
		if (de2 > size) de2 = size;
		if (de3 > size) de3 = size;
		switch (type)
		{
			case SORT_ALPHA:
				fusionAlpha(vTmp, de1, de2 - 1, de2, de3 - 1, de3 - de1, de1);
				break;
			case SORT_DATE:
				fusionDate(vTmp, de1, de2 - 1, de2, de3 - 1, de3 - de1, de1);
				break;
		}
		de1 = de3;
	}
	
	for (unsigned int i = 0; i <  size; i++) vMedia[i] = vTmp[i];
	sortLength *= 2;
}

this->sort = type;
!!!134433.cpp!!!	fusionAlpha(inout vTmp : Media**, in de1 : int, in vers1 : int, in de2 : int, in vers2 : int, in count : int, in posInB : int) : void
for (int i = 0; i < count; i++)
{
	if (de2 > vers2)
		vTmp[posInB++] = vMedia[de1++];
	else if (de1 > vers1)
		vTmp[posInB++] = vMedia[de2++];
	else if (vMedia[de1]->get_type() == vMedia[de2]->get_type())
		{
			switch(vMedia[de1]->get_type())
			{
				case TYPE_ZIK:
					if (Zik::cmp_alpha(((Zik*)vMedia[de1]), ((Zik*)vMedia[de2])) < 1)
						vTmp[posInB++] = vMedia[de1++];
					else
						vTmp[posInB++] = vMedia[de2++];
					break;
				case TYPE_FILM:
					if (Film::cmp_alpha(((Film*)vMedia[de1]), ((Film*)vMedia[de2])) < 1)
						vTmp[posInB++] = vMedia[de1++];
					else
						vTmp[posInB++] = vMedia[de2++];
					break;
				case TYPE_BOOK:
					if (Book::cmp_alpha(((Book*)vMedia[de1]), ((Book*)vMedia[de2])) < 1)
						vTmp[posInB++] = vMedia[de1++];
					else
						vTmp[posInB++] = vMedia[de2++];
					break;
			}
		}
	else if (vMedia[de1]->get_type() < vMedia[de2]->get_type())
		vTmp[posInB++] = vMedia[de1++];
	else
		vTmp[posInB++] = vMedia[de2++];
}
return;
!!!134561.cpp!!!	fusionDate(inout vTmp : Media**, in de1 : int, in vers1 : int, in de2 : int, in vers2 : int, in count : int, in posInB : int) : void
for (int i = 0; i < count; i++)
{
	if (de2 > vers2)
		vTmp[posInB++] = vMedia[de1++];
	else if (de1 > vers1)
		vTmp[posInB++] = vMedia[de2++];
	else if (Media::cmp_date(vMedia[de1], vMedia[de2]) < 1)
		vTmp[posInB++] = vMedia[de1++];
	else
		vTmp[posInB++] = vMedia[de2++];
}
return;
